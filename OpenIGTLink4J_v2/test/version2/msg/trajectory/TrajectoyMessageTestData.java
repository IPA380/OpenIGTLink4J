/*=========================================================================
  Program:   OpenIGTLink4J Library
  Language:  java
  
  Copyright (c) Fraunhofer IPA. All rights reserved.
  
  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notices for more information.
=========================================================================*/ 
 
package msg.trajectory;

import util.MessageTestHelper;

public class TrajectoyMessageTestData {

	static byte[] test_message_header = MessageTestHelper.convertCharToByte(new char[]{
	        /*------- OpenIGTLink message header --------*/
	        0x00, 0x01,                                     /* Version number */
	        0x54, 0x52, 0x41, 0x4a, 0x00, 0x00, 0x00, 0x00,
	        0x00, 0x00, 0x00, 0x00,                         /* TRAJECTORY */
	        0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	        0x6d, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	        0x00, 0x00, 0x00, 0x00,                         /* Device name */
	        0x00, 0x00, 0x00, 0x00, 0x49, 0x96, 0x02, 0xd2, /* Time stamp */
	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc2, /* Body size */
	        0x62, 0x05, 0xa3, 0x66, 0x18, 0x57, 0x76, 0x30 	/* CRC */
    });

    /*---------- TRAJECTORY message body ------------*/
    
    static byte[] test_message_body_data_0 = MessageTestHelper.convertCharToByte(new char[]{
    	/* Trajectory data 0 */
        0x54, 0x52, 0x41, 0x4a, 0x45, 0x43, 0x54, 0x4f,
        0x52, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52,
        0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Trajectory description */
        
        0x54, 0x52, 0x41, 0x4a, 0x45, 0x43, 0x54, 0x4f,
        0x52, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Group name (Trajectory etc.) */
        
        0x03,                                           /* Type */
        0x00,                                           /* Reserved */
        0xff, 0x00, 0x00, 0xff,                         /* RGBA */
        
        0x41, 0x20, 0x00, 0x00, 0x41, 0x70, 0x00, 0x00,
        0x41, 0xa0, 0x00, 0x00,                         /* Entry position */
        0x41, 0xc8, 0x00, 0x00, 0x41, 0xf0, 0x00, 0x00,
        0x42, 0x0c, 0x00, 0x00,                         /* Target position */
        0x40, 0xa0, 0x00, 0x00,                         /* Radius */
        
        0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x30, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00                          /* Owner image */
    });
    static byte[] test_message_body_data_1 = MessageTestHelper.convertCharToByte(new char[]{
    	        /* Trajectory data 1 */
        0x54, 0x52, 0x41, 0x4a, 0x45, 0x43, 0x54, 0x4f,
        0x52, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52,
        0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x31,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Trajectory description */
        
        0x54, 0x52, 0x41, 0x4a, 0x45, 0x43, 0x54, 0x4f,
        0x52, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Group name (Trajectory etc.) */
        
        0x03,                                           /* Type */
        0x00,                                           /* Reserved */
        0x00, 0xff, 0x00, 0xff,                         /* RGBA */
        
        0x42, 0x20, 0x00, 0x00, 0x42, 0x34, 0x00, 0x00,
        0x42, 0x48, 0x00, 0x00,                         /* Entry position */
        0x42, 0x5c, 0x00, 0x00, 0x42, 0x70, 0x00, 0x00,
        0x42, 0x82, 0x00, 0x00,                         /* Target position */
        0x40, 0x20, 0x00, 0x00,                         /* Radius */
        
        0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x30, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00	                        /* Owner image */
    });
    static byte[] test_message_body_data_2 = MessageTestHelper.convertCharToByte(new char[]{
        /* Trajectory data 2 */
        0x54, 0x52, 0x41, 0x4a, 0x45, 0x43, 0x54, 0x4f,
        0x52, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52,
        0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x32,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Trajectory description */
        
        0x54, 0x52, 0x41, 0x4a, 0x45, 0x43, 0x54, 0x4f,
        0x52, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Group name (Trajectory etc.) */
        
        0x03,                                           /* Type */
        0x00,                                           /* Reserved */
        0x00, 0x00, 0xff, 0xff,                         /* RGBA */
        
        0x42, 0x8c, 0x00, 0x00, 0x42, 0x96, 0x00, 0x00,
        0x42, 0xa0, 0x00, 0x00,                         /* Entry position */
        0x42, 0xaa, 0x00, 0x00, 0x42, 0xb4, 0x00, 0x00,
        0x42, 0xbe, 0x00, 0x00,                         /* Target position */
        0x00, 0x00, 0x00, 0x00,                         /* Radius */
        
        0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x30, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00                         /* Owner image */ 
    });
    
    static byte[] test_message_body = MessageTestHelper.join(test_message_body_data_0, 
    		MessageTestHelper.join(test_message_body_data_1, test_message_body_data_2));
    
    static byte[] test_message = MessageTestHelper.join(test_message_header, test_message_body);

    static long VERSION = 1L;
    
    static long timestamp = 1234567890;
    static String deviceName = "DeviceName";
    
    static TrajectoryElement testElement0 = new TrajectoryElement(
        "TRAJECTORY_DESCRIPTION_0",
        "TRAJECTORY",
        TRAJ_TYPE.ENTRY_TARGET,
        new float[]{10, 15, 20},
        new float[]{25, 30, 35},
        new byte[]{(byte)255,(byte)0,(byte)0,(byte)255},
        (float)5,
        "IMAGE_0");
    static TrajectoryElement testElement1 = new TrajectoryElement(
            "TRAJECTORY_DESCRIPTION_1",
            "TRAJECTORY",
            TRAJ_TYPE.ENTRY_TARGET,
            new float[]{40, 45, 50},
            new float[]{55, 60, 65},
            new byte[]{(byte)0,(byte)255,(byte)0,(byte)255},
            (float) 2.5,
            "IMAGE_0");
    static TrajectoryElement testElement2 = new TrajectoryElement(
            "TRAJECTORY_DESCRIPTION_2",
            "TRAJECTORY",
            TRAJ_TYPE.ENTRY_TARGET,
            new float[]{70, 75, 80},
            new float[]{85, 90, 95},
            new byte[]{(byte)0,(byte)0,(byte)255,(byte)255},
            0,
            "IMAGE_0");
    static TrajectoryElement[] testElement = new TrajectoryElement[]{testElement0, 
    		testElement1, testElement2};
}
